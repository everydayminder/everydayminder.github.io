I"5<p>annotation 방식의 특성상, 정밀한 설정에는 용이하나 jasypt를 적용하면서 사용할 model 클래스에 매번 적어줘야 한다면,
역시 “불편”할 것이다.
그럴 때는, 역시 xml의 선언이 훨씬 편리할 것이다.</p>

<ol>
  <li>annotation 방식
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@TypeDef</span> <span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"encryptedString"</span><span class="o">,</span> <span class="n">typeClass</span><span class="o">=</span><span class="nc">EncryptedStringType</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
 <span class="n">parameters</span><span class="o">={</span><span class="nd">@Parameter</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"encryptorRegisteredName"</span><span class="o">,</span> <span class="n">value</span><span class="o">=</span><span class="s">"strongHibernateStringEncryptor"</span><span class="o">)})</span>
</code></pre></div>    </div>
  </li>
  <li>XML 방식
XML로 객체를 만들지 않고, annotation을 사용하여 만든 상황에서 hbm.xml을 만들어 사용하는 식으로 연결을 해보았다.
hibernate-configuration과 hibernate-mapping은 다른 dtd를 사용하기에 별도의 파일로 만들었다.</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
 "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</span>

<span class="nt">&lt;hibernate-mapping</span> <span class="na">package=</span><span class="s">"com.luran.jasypt_test"</span><span class="nt">&gt;</span>
 <span class="nt">&lt;typedef</span> <span class="na">name=</span><span class="s">"encryptedString"</span> <span class="na">class=</span><span class="s">"org.jasypt.hibernate.type.EncryptedStringType"</span><span class="nt">&gt;</span>
 <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"algorithm"</span><span class="nt">&gt;</span>PBEWithMD5AndTripleDES<span class="nt">&lt;/param&gt;</span>
 <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"password"</span><span class="nt">&gt;</span>jasypt<span class="nt">&lt;/param&gt;</span>
 <span class="nt">&lt;param</span> <span class="na">name=</span><span class="s">"keyObtentionIterations"</span><span class="nt">&gt;</span>1000<span class="nt">&lt;/param&gt;</span>
 <span class="nt">&lt;/typedef&gt;</span>
<span class="nt">&lt;/hibernate-mapping&gt;</span>
</code></pre></div></div>

<p>현재 jasypt.org에 안내된 가이드는 1.9 기준이기 때문에, 해당 클래스가</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.jasypt.hibernate4.type.EncryptedStringType
</code></pre></div></div>
<p>로 되어있다.  본 테스트에서 사용한 버전은 1.8이기에 위와 같이 변경해줘야 제대로 인식이 된다. (namespace가 변경된 것 같음)</p>

<p>이제 기존에 작성한 hibernate.cfg.xml에서 이 mapping.hbm.xml을 읽어들이도록 변경해주자.
hibernate-configuration.dtd에 보면, mapping attribute가 있다. 이 attribute에 방금 작성한 파일을 지정한다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;hibernate-configuration&gt;</span>
 <span class="nt">&lt;session-factory&gt;</span>
 ...
 <span class="nt">&lt;mapping</span> <span class="na">resource=</span><span class="s">"META-INF/mapping.hbm.xml"</span><span class="nt">/&gt;</span>
 ...
 <span class="nt">&lt;/session-factory&gt;</span>
<span class="nt">&lt;/hibernate-configuration&gt;</span>
</code></pre></div></div>

<p>앞서 작성한 annotation 방식 typedef를 주석처리하고, 이제 다시 실행시켜 보자.
동일하게 동작하는 것을 확인할 수 있다.</p>

:ET